{"version":3,"sources":["useWillUnmount.js"],"names":["useWillUnmount","onUnmountHandler","setOnUnmount","current"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;AAiBA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAAA,wBACc,kCADd;AAAA;AAAA,MACpBC,gBADoB;AAAA,MACFC,YADE;;AAG3B,wBAAU;AAAA,WAAM,YAAM;AACpB,UAAID,gBAAgB,CAACE,OAArB,EAA8B;AAC5BF,QAAAA,gBAAgB,CAACE,OAAjB;AACD;AACF,KAJS;AAAA,GAAV,EAIG,EAJH;AAMA,SAAOD,YAAP;AACD,CAVD;;eAYeF,c","sourcesContent":["import { useEffect } from 'react';\nimport useCallbackRef from './useCallbackRef';\n\n/**\n * Returns a function that accepts a callback to be performed when the component will unmount.\n *\n * ### Usage:\n *\n * ```jsx harmony\n * const MyComponent = () => {\n *   const onUnmount = useWillUnmount();\n *\n *   onUnmount(() => console.log('Component will unmount'));\n *\n *   return (<div />)\n * }\n * ```\n */\nconst useWillUnmount = () => {\n  const [onUnmountHandler, setOnUnmount] = useCallbackRef();\n\n  useEffect(() => () => {\n    if (onUnmountHandler.current) {\n      onUnmountHandler.current();\n    }\n  }, []);\n\n  return setOnUnmount;\n};\n\nexport default useWillUnmount;\n"],"file":"useWillUnmount.js"}