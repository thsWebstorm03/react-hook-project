{"version":3,"sources":["useTimeout.js"],"names":["useTimeout","delay","timeoutRef","callbackRef","setCallbackRef","current","setTimeout","clearTimeout"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;AA0BA,IAAMA,UAAU,GAAG,SAAbA,UAAa,GAAkB;AAAA,MAAjBC,KAAiB,uEAAT,IAAS;AACnC,MAAMC,UAAU,GAAG,oBAAnB;;AADmC,wBAEG,kCAFH;AAAA;AAAA,MAE5BC,WAF4B;AAAA,MAEfC,cAFe;;AAInC,wBAAU,YAAM;AACd,QAAI,CAACF,UAAU,CAACG,OAAZ,IAAuBF,WAAW,CAACE,OAAvC,EAAgD;AAC9CH,MAAAA,UAAU,CAACG,OAAX,GAAqBC,UAAU,CAAC,YAAM;AACpCH,QAAAA,WAAW,CAACE,OAAZ;AACD,OAF8B,EAE5BJ,KAF4B,CAA/B;AAGD;;AAED,WAAO,YAAM;AACXM,MAAAA,YAAY,CAACL,UAAU,CAACG,OAAZ,CAAZ;AACD,KAFD;AAGD,GAVD,EAUG,EAVH;AAYA,SAAOD,cAAP;AACD,CAjBD;;eAmBeJ,U","sourcesContent":["import { useEffect, useRef } from 'react';\nimport useCallbackRef from './useCallbackRef';\n\n/**\n * Returns a setter function that accepts a callback to be performed after the given delay.\n *\n * ### Usage:\n *\n * ```jsx harmony\n * const useTimeCounter = () => {\n *   const [seconds, setSeconds] = useState(0);\n *   const [ms, setMilliseconds] = useState(0);\n *   const everySecond = useInterval(1000);\n *   const everyMillisecond = useInterval(100);\n *\n *   everySecond(() => {\n *     setSeconds(1 + seconds);\n *   }, [seconds]);\n *\n *   everyMillisecond(() => {\n *     setMilliseconds(1 + ms);\n *   });\n *\n *   return {seconds, ms};\n * }\n * ```\n */\nconst useTimeout = (delay = 1000) => {\n  const timeoutRef = useRef();\n  const [callbackRef, setCallbackRef] = useCallbackRef();\n\n  useEffect(() => {\n    if (!timeoutRef.current && callbackRef.current) {\n      timeoutRef.current = setTimeout(() => {\n        callbackRef.current();\n      }, delay);\n    }\n\n    return () => {\n      clearTimeout(timeoutRef.current);\n    };\n  }, []);\n\n  return setCallbackRef;\n};\n\nexport default useTimeout;\n"],"file":"useTimeout.js"}