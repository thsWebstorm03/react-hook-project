{"version":3,"sources":["useTimeout.js"],"names":["defaultOptions","cancelPrevious","cancelOnUnmount","useTimeout","fn","delay","options","_fn","undefined","_delay","_options","userCallback","setUserCallback","timeoutRef","opts","current","setTimeout","clearTimeout"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,cAAc,GAAG;AACrBC,EAAAA,cAAc,EAAE,KADK;AAErBC,EAAAA,eAAe,EAAE;AAFI,CAAvB;;AASA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,EAAD,EAAKC,KAAL,EAAyC;AAAA,MAA7BC,OAA6B,uEAAnBN,cAAmB;;AAE1D,MAAMO,GAAG,GAAG,OAAOH,EAAP,KAAc,UAAd,GAA2BA,EAA3B,GAAgCI,SAA5C;;AACA,MAAMC,MAAM,GAAG,OAAOJ,KAAP,KAAiB,QAAjB,IAA6B,OAAOD,EAAP,KAAc,QAA3C,GAAsDA,EAAtD,GAA2DC,KAA1E;;AACA,MAAMK,QAAQ,GAAG,QAAOJ,OAAP,MAAmB,QAAnB,IAA+B,QAAOD,KAAP,MAAiB,QAAhD,GAA2DA,KAA3D,GAAmEC,OAApF;;AAJ0D,wBAOlB,iCAAeC,GAAf,CAPkB;AAAA;AAAA,MAOnDI,YAPmD;AAAA,MAOrCC,eAPqC;;AAQ1D,MAAMC,UAAU,GAAG,oBAAnB;AACA,MAAMC,IAAI,GAAG,oBAAQ;AAAA,6BAAYd,cAAZ,MAAgCU,QAAQ,IAAI,EAA5C;AAAA,GAAR,EAA4D,CAACJ,OAAD,EAAUD,KAAV,CAA5D,CAAb;AAGA,wBAAU,YAAM;AACd,QAAI,CAACQ,UAAU,CAACE,OAAZ,IAAuBJ,YAAY,CAACI,OAAxC,EAAiD;AAC/CF,MAAAA,UAAU,CAACE,OAAX,GAAqBC,UAAU,CAAC,YAAM;AACpCL,QAAAA,YAAY,CAACI,OAAb;AACD,OAF8B,EAE5BN,MAF4B,CAA/B;AAGD;AACF,GAND,EAMG,CAACL,EAAD,EAAKC,KAAL,CANH;AASA,wBAAU,YAAM;AACd,QAAIS,IAAI,CAACb,cAAT,EAAyB;AACvBgB,MAAAA,YAAY,CAACJ,UAAU,CAACE,OAAZ,CAAZ;AACAF,MAAAA,UAAU,CAACE,OAAX,GAAqB,IAArB;AACD;AACF,GALD,EAKG,CAACT,OAAD,EAAUD,KAAV,CALH;AAQA,wBAAU;AAAA,WAAM,YAAM;AACpB,UAAIQ,UAAU,CAACE,OAAX,IAAsBT,OAAO,CAACJ,eAAlC,EAAmD;AACjDe,QAAAA,YAAY,CAACJ,UAAU,CAACE,OAAZ,CAAZ;AACD;AACF,KAJS;AAAA,GAAV,EAIG,EAJH;AAMA,SAAO,CAACR,GAAD,GAAOK,eAAP,GAAyBC,UAAU,CAACE,OAA3C;AACD,CApCD;;eAsCe,wBAAWZ,UAAX,C","sourcesContent":["import curryRight from 'lodash.curryright';\nimport { useEffect, useMemo, useRef } from 'react';\nimport useCallbackRef from './useCallbackRef';\n\nconst defaultOptions = {\n  cancelPrevious: false,\n  cancelOnUnmount: true,\n};\n\n/**\n * useTimeout is a \"curry-ed\" hook that accepts a function and a delay time (in milliseconds), then delays the\n * execution of the given function by the defined time.\n */\nconst useTimeout = (fn, delay, options = defaultOptions) => {\n  /* eslint-disable no-underscore-dangle */\n  const _fn = typeof fn === 'function' ? fn : undefined;\n  const _delay = typeof delay !== 'number' && typeof fn === 'number' ? fn : delay;\n  const _options = typeof options === 'object' && typeof delay === 'object' ? delay : options;\n  /* eslint-enable no-underscore-dangle */\n\n  const [userCallback, setUserCallback] = useCallbackRef(_fn); // contains the function provided to be delayed\n  const timeoutRef = useRef(); // contains the current timeout ref\n  const opts = useMemo(() => ({ ...defaultOptions, ...(_options || {}) }), [options, delay]); // safe option object\n\n  // saves the timeout reference into the local timeoutRef\n  useEffect(() => {\n    if (!timeoutRef.current && userCallback.current) {\n      timeoutRef.current = setTimeout(() => {\n        userCallback.current();\n      }, _delay);\n    }\n  }, [fn, delay]);\n\n  // handles the options\n  useEffect(() => {\n    if (opts.cancelPrevious) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, [options, delay]);\n\n  // makes sure to timeout will be cleared when component unmount\n  useEffect(() => () => {\n    if (timeoutRef.current && options.cancelOnUnmount) {\n      clearTimeout(timeoutRef.current);\n    }\n  }, []);\n\n  return !_fn ? setUserCallback : timeoutRef.current;\n};\n\nexport default curryRight(useTimeout);\n"],"file":"useTimeout.js"}