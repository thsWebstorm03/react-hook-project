{"version":3,"sources":["useDebouncedCallback.js"],"names":["useDebouncedCallback","fn","wait","dependencies"],"mappings":";;;;;;;AAAA;;AACA;;;;AA0CA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,EAAD;AAAA,MAAKC,IAAL,uEAAY,GAAZ;AAAA,MAAiBC,YAAjB;AAAA,SAAkC,wBAAY,wBAASF,EAAT,EAAaC,IAAb,CAAZ,EAAgCC,YAAhC,CAAlC;AAAA,CAA7B;;eAEeH,oB","sourcesContent":["import debounce from 'lodash.debounce';\nimport { useCallback } from 'react';\n\n/**\n * Accepts a function  and returns a new debounced yet memoized version of that same function that delays\n * its invoking by 500ms.\n *\n * Usage:\n *\n * ```jsx harmony\n * const MyComponent = () => {\n *   const debouncedClick = useDebouncedCallback(() => {\n *     console.log('Button clicked...');\n *   });\n **\n *   return (<button onClick={debouncedClick}>Click me</button>)\n * }\n * ```\n *\n * It is possible to change the debounce time by defining how many ms to wait:\n *\n * ```jsx harmony\n * const MyComponent = () => {\n *   const debouncedClick = useDebouncedCallback(() => {\n *     console.log('Button clicked...');\n *   }, 250);\n *\n *   return (<button onClick={debouncedClick}>Click me</button>)\n * }\n * ```\n *\n * Since `useDebouncedCallback` uses `useCallback` under the hood, it is also possible to define its dependencies:\n *\n * ```jsx harmony\n * const MyComponent = (props) => {\n *   const debouncedClick = useDebouncedCallback(() => {\n *     console.log('Button clicked...');\n *   }, 250, [props.foo]);\n *\n *   return (<button onClick={debouncedClick}>Click me</button>)\n * }\n * ```\n */\nconst useDebouncedCallback = (fn, wait = 500, dependencies) => useCallback(debounce(fn, wait), dependencies);\n\nexport default useDebouncedCallback;\n"],"file":"useDebouncedCallback.js"}