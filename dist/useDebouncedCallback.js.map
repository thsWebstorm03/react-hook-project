{"version":3,"sources":["useDebouncedCallback.js"],"names":["useDebouncedCallback","fn","wait","dependencies"],"mappings":";;;;;;;AAAA;;AACA;;;;AA0BA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,EAAD;AAAA,MAAKC,IAAL,uEAAY,GAAZ;AAAA,MAAiBC,YAAjB;AAAA,SAAkC,wBAAY,0BAASF,EAAT,EAAaC,IAAb,CAAZ,EAAgCC,YAAhC,CAAlC;AAAA,CAA7B;;eAEeH,oB","sourcesContent":["import { useCallback } from 'react';\nimport debounce from './utils/debounce';\n\n/**\n * Accepts a function and returns a new debounced yet memoized version of that same function that delays\n * its invoking by the defined time.<br />\n * If time is not defined, its default value will be 250ms.\n *\n * ### Usage:\n *\n * ```jsx harmony\n *\n * const TestComponent = () => {\n *   const onWindowResize = useGlobalEvent('resize');\n *\n *   onWindowResize((event) => {\n *      console.log('GNIFRO', event)\n *   });\n *\n *   return (\n *      <div style={compStyle}>\n *       pippo\n *    </div>\n *  );\n *}\n * ```\n */\nconst useDebouncedCallback = (fn, wait = 250, dependencies) => useCallback(debounce(fn, wait), dependencies);\n\nexport default useDebouncedCallback;\n"],"file":"useDebouncedCallback.js"}