{"version":3,"sources":["useCallbackRef.js"],"names":["useCallbackRef","initialValue","callbackRef","setCallbackRef","nextCallback","current"],"mappings":";;;;;;;AAAA;;AAgDA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,YAAD,EAAkB;AACvC,MAAMC,WAAW,GAAG,mBAAOD,YAAP,CAApB;AAEA,MAAME,cAAc,GAAG,wBAAY,UAACC,YAAD,EAAkB;AACnD,QAAIA,YAAY,KAAKF,WAAW,CAACG,OAA7B,IAAwC,OAAOD,YAAP,KAAwB,UAApE,EAAgF;AAC9EF,MAAAA,WAAW,CAACG,OAAZ,GAAsBD,YAAtB;AACD;AACF,GAJsB,CAAvB;AAMA,SAAO,CAACF,WAAD,EAAcC,cAAd,CAAP;AACD,CAVD;;eAYeH,c","sourcesContent":["import { useCallback, useRef } from 'react';\n\n/**\n * Returns an array where the first item is the [ref](https://reactjs.org/docs/hooks-reference.html#useref) to a\n * callback function and the second one is setter for that function.<br /><br />\n *\n * Although it looks quite similar to a [useState](https://reactjs.org/docs/hooks-reference.html#usestate), in this\n * case the setter just makes sure the given callback is indeed a new function.<br /><br />\n * **Setting a callback ref does not imply your component to re-render.**<br /><br />\n *\n * `useCallbackRef` is useful when abstracting other custom hooks to possibly implement callback setters.\n *\n * ### Usage in a custom hook:\n *\n * ```jsx harmony\n * const useSomething = () => {\n *   const [ callbackRef, setSomething ] = useCallbackRef();\n *\n *   useEffect(() => {\n *    something.addEventListener('change', () => {\n *      if(callbackRef.current) {\n *        callbackRef.current();\n *      }\n *    });\n *   }, []);\n *\n *   return setSomething;\n * }\n * ```\n *\n * ### Usage of useSomething:\n *\n * ```jsx harmony\n * const MyComponent = () => {\n *   const onSomethingChange = useSomething();\n *\n *   onSomethingChange(() => {\n *     doSomething();\n *   });\n *\n *   return (\n *    <div>\n *      My component\n *    </div>\n *   );\n * }\n * ```\n */\nconst useCallbackRef = (initialValue) => {\n  const callbackRef = useRef(initialValue);\n\n  const setCallbackRef = useCallback((nextCallback) => {\n    if (nextCallback !== callbackRef.current && typeof nextCallback === 'function') {\n      callbackRef.current = nextCallback;\n    }\n  });\n\n  return [callbackRef, setCallbackRef];\n};\n\nexport default useCallbackRef;\n"],"file":"useCallbackRef.js"}