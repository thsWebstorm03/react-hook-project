{"version":3,"sources":["useMediaQuery.js"],"names":["useMediaQuery","mediaQuery","window","matchMedia","matches","isVerified","setIsVerified","mediaQueryList","documentChangeHandler","addListener","removeListener"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;AAyBA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD,EAAgB;AACpC,MAAI,EAAE,gBAAgBC,MAAlB,CAAJ,EAA+B,OAAO,0CAAyB,6BAAzB,CAAP;;AADK,kBAGA,qBAAS,CAAC,CAACA,MAAM,CAACC,UAAP,CAAkBF,UAAlB,EAA8BG,OAAzC,CAHA;AAAA;AAAA,MAG7BC,UAH6B;AAAA,MAGjBC,aAHiB;;AAKpC,wBAAU,YAAM;AACd,QAAMC,cAAc,GAAGL,MAAM,CAACC,UAAP,CAAkBF,UAAlB,CAAvB;;AACA,QAAMO,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,aAAMF,aAAa,CAAC,CAAC,CAACC,cAAc,CAACH,OAAlB,CAAnB;AAAA,KAA9B;;AAEAG,IAAAA,cAAc,CAACE,WAAf,CAA2BD,qBAA3B;AAEAA,IAAAA,qBAAqB;AACrB,WAAO,YAAM;AACXD,MAAAA,cAAc,CAACG,cAAf,CAA8BF,qBAA9B;AACD,KAFD;AAGD,GAVD,EAUG,CAACP,UAAD,CAVH;AAYA,SAAOI,UAAP;AACD,CAlBD;;eAoBeL,a","sourcesContent":["import { useState, useEffect } from 'react';\nimport createCbSetterErrorProxy from './utils/createCbSetterErrorProxy';\n\n/**\n * Accepts a media query string then uses the\n * [window.matchMedia](https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia) API to determine if it\n * matches with the current document.<br />\n * It also monitor the document changes to detect when it matches or stops matching the media query.<br />\n * Returns the validity state of the given media query.\n *\n * ### Usage\n *\n * ```jsx harmony\n * const MediaQueryReporter = () => {\n *   const isTablet = useMediaQuery('(max-width: 48rem)');\n *   const isDesktop = useMediaQuery('(min-width: 48rem)');\n *\n *   return (\n *     <div style={compStyle}>\n *       <p>Tablet view? {isTablet ? 'yes' : 'no'}</p>\n *       <p>Desktop view? {isDesktop ? 'yet' : 'no'}</p>\n *     </div>\n *    );\n * };\n * ```\n */\nconst useMediaQuery = (mediaQuery) => {\n  if (!('matchMedia' in window)) return createCbSetterErrorProxy('matchMedia is not supported');\n\n  const [isVerified, setIsVerified] = useState(!!window.matchMedia(mediaQuery).matches);\n\n  useEffect(() => {\n    const mediaQueryList = window.matchMedia(mediaQuery);\n    const documentChangeHandler = () => setIsVerified(!!mediaQueryList.matches);\n\n    mediaQueryList.addListener(documentChangeHandler);\n\n    documentChangeHandler();\n    return () => {\n      mediaQueryList.removeListener(documentChangeHandler);\n    };\n  }, [mediaQuery]);\n\n  return isVerified;\n};\n\nexport default useMediaQuery;\n"],"file":"useMediaQuery.js"}