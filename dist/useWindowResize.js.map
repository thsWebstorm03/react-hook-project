{"version":3,"sources":["useWindowResize.js"],"names":["useWindowResize","handler","setHandler","onMount","onUnmount","window","addEventListener","current","removeEventListener"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;AAkBA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAAA,wBACE,kCADF;AAAA;AAAA,MACrBC,OADqB;AAAA,MACZC,UADY;;AAAA,sBAEG,gCAFH;AAAA,MAEpBC,OAFoB,iBAEpBA,OAFoB;AAAA,MAEXC,SAFW,iBAEXA,SAFW;;AAI5BD,EAAAA,OAAO,CAAC,YAAM;AACZE,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCL,OAAO,CAACM,OAA1C;AACD,GAFM,CAAP;AAIAH,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCP,OAAO,CAACM,OAA7C;AACD,GAFQ,CAAT;AAIA,SAAOL,UAAP;AACD,CAbD;;eAeeF,e","sourcesContent":["import useLifecycle from './useLifecycle';\nimport useCallbackRef from './useCallbackRef';\n\n/**\n * Returns a function that accepts a callback to be performed when the window resizes.\n * Please note: the callback is not debounced, to improve performances check `useDebouncedCallback`;\n *\n * Usage:\n *\n * ```jsx harmony\n * const MyComponent = () => {\n *   const onWindowResize = useWindowResize();\n *\n *   onWindowResize(() => console.log('Window is resizing...'));\n *\n *   return (<div />)\n * }\n * ```\n */\nconst useWindowResize = () => {\n  const [handler, setHandler] = useCallbackRef();\n  const { onMount, onUnmount } = useLifecycle();\n\n  onMount(() => {\n    window.addEventListener('resize', handler.current);\n  });\n\n  onUnmount(() => {\n    window.removeEventListener('resize', handler.current);\n  });\n\n  return setHandler;\n};\n\nexport default useWindowResize;\n"],"file":"useWindowResize.js"}