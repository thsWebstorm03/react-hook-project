{"version":3,"sources":["useMouseEvents.js"],"names":["useIsomorphicMouseEvent","ref","callbackRef","eventName","cb","current","target","document","addEventListener","removeEventListener","useMouseEvents","onMouseDownHandler","setOnMouseDown","onMouseEnterHandler","setOnMouseEnter","onMouseLeaveHandler","setOnMouseLeave","onMouseMoveHandler","setOnMouseMove","onMouseOutHandler","setOnMouseOut","onMouseOverHandler","setOnMouseOver","onMouseUpHandler","setOnMouseUp","Object","freeze","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport useCallbackRef from './useCallbackRef';\nimport createCbSetterErrorProxy from './utils/createCbSetterErrorProxy';\nimport hasOwnProperty from './utils/hasOwnProperty';\n\nconst useIsomorphicMouseEvent = (ref, callbackRef, eventName) => {\n  useEffect(() => {\n    const cb = (...args) => {\n      if (callbackRef.current) {\n        callbackRef.current(...args);\n      }\n    };\n    let target;\n\n    if (ref !== null && !!ref.current) {\n      target = ref.current;\n    }\n\n    if (ref === null) {\n      target = document;\n    }\n\n    if (target && target.addEventListener) {\n      target.addEventListener(eventName, cb);\n    }\n\n    return () => {\n      if (target && target.removeEventListener) {\n        target.removeEventListener(eventName, cb);\n      }\n    };\n  }, [callbackRef, ref]);\n};\n\n/**\n * Returns a frozen object of callback setters to handle the mouse events.<br/>\n * It accepts a DOM ref representing the events target. <br/>\n * If a target is not provided the events will be globally attached to the document object.\n * <br/>\n * ### Shall the `useMouseEvents` callbacks replace the standard mouse handler props?\n *\n * **They shall not!**<br />\n * **useMouseEvents is meant to be used to abstract more complex hooks that need to control mouse**, for instance:\n * a drag n drop hook.<br />\n * Using useMouseEvents handlers instead of the classic props approach it's just as bad as it sounds since you'll\n * lose the React SyntheticEvent performance boost.<br />\n * If you were doing something like the following:\n *\n * ```jsx harmony\n * const MyComponent = (props) => {\n *  const { myCallback } = props;\n *\n *  return <div onMouseDown={myCallback} />\n * }\n * ```\n *\n * **Please keep doing it**!\n *\n * ### Target ref usage:\n *\n * ```jsx harmony\n * const MyComponent = () => {\n *   const ref = useRef();\n *   const { onMouseMove } = useMouseEvents(ref);\n *   const [coordinates, setCoordinates] = useState([0, 0]);\n *\n *   // demo purposes only, in real-life scenario use onMouseMove prop instead\n *   onMouseMove((event) => {\n *     const nextCoords = [event.clientX, event.clientY];\n *     setCoordinates(nextCoords);\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       The current mouse coordinates within this div are:\n *       <p>x:{coordinates[0]} y:{coordinates[1]}</p>\n *     </div>\n *   );\n * }\n * ```\n * <br />\n *\n * ### Global events usage:\n *\n * ```jsx harmony\n * const MyComponent = () => {\n *   const [coordinates, setCoordinates] = useState([0, 0]);\n *   const { onMouseMove } = useMouseEvents();\n *\n *   // demo purposes only, in real-life scenario use onMouseMove prop instead\n *   onMouseMove((event) => {\n *     const nextCoords = [event.clientX, event.clientY];\n *     setCoordinates(nextCoords);\n *   });\n *\n *   return (\n *     <div style={style}>\n *       The current mouse coordinates within the document are:\n *       <p>x:{coordinates[0]} y:{coordinates[1]}</p>\n *     </div>\n *   );\n *};\n * ```\n */\nconst useMouseEvents = (ref = null) => {\n  const [onMouseDownHandler, setOnMouseDown] = useCallbackRef();\n  const [onMouseEnterHandler, setOnMouseEnter] = useCallbackRef();\n  const [onMouseLeaveHandler, setOnMouseLeave] = useCallbackRef();\n  const [onMouseMoveHandler, setOnMouseMove] = useCallbackRef();\n  const [onMouseOutHandler, setOnMouseOut] = useCallbackRef();\n  const [onMouseOverHandler, setOnMouseOver] = useCallbackRef();\n  const [onMouseUpHandler, setOnMouseUp] = useCallbackRef();\n\n  if (ref !== null && !hasOwnProperty(ref, 'current')) {\n    return createCbSetterErrorProxy('Unable to assign any mouse event to the given ref');\n  }\n\n  useIsomorphicMouseEvent(ref, onMouseDownHandler, 'mousedown');\n  useIsomorphicMouseEvent(ref, onMouseEnterHandler, 'mouseenter');\n  useIsomorphicMouseEvent(ref, onMouseLeaveHandler, 'mouseleave');\n  useIsomorphicMouseEvent(ref, onMouseMoveHandler, 'mousemove');\n  useIsomorphicMouseEvent(ref, onMouseOutHandler, 'mouseout');\n  useIsomorphicMouseEvent(ref, onMouseOverHandler, 'mouseover');\n  useIsomorphicMouseEvent(ref, onMouseUpHandler, 'mouseup');\n\n  return Object.freeze({\n    onMouseDown: setOnMouseDown,\n    onMouseEnter: setOnMouseEnter,\n    onMouseLeave: setOnMouseLeave,\n    onMouseMove: setOnMouseMove,\n    onMouseOut: setOnMouseOut,\n    onMouseOver: setOnMouseOver,\n    onMouseUp: setOnMouseUp,\n  });\n};\n\nexport default useMouseEvents;\n"],"file":"useMouseEvents.js"}