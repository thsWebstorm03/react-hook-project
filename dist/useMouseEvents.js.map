{"version":3,"sources":["useMouseEvents.js"],"names":["assignMouseEventOnMount","targetRef","handlerRef","eventName","cb","current","target","document","addEventListener","removeEventListener","useMouseEvents","onMouseDownHandler","setOnMouseDown","onMouseEnterHandler","setOnMouseEnter","onMouseLeaveHandler","setOnMouseLeave","onMouseMoveHandler","setOnMouseMove","onMouseOutHandler","setOnMouseOut","onMouseOverHandler","setOnMouseOver","onMouseUpHandler","setOnMouseUp","Object","freeze","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport useCallbackRef from './useCallbackRef';\nimport createCbSetterErrorProxy from './utils/createCbSetterErrorProxy';\nimport hasOwnProperty from './utils/hasOwnProperty';\n\nconst assignMouseEventOnMount = (targetRef, handlerRef, eventName) => {\n  useEffect(() => {\n    const cb = (...args) => {\n      if (handlerRef.current) {\n        handlerRef.current(...args);\n      }\n    };\n    let target;\n\n    if (targetRef !== null && !!targetRef.current) {\n      target = targetRef.current;\n    }\n\n    if (targetRef === null) {\n      target = document;\n    }\n\n    if (target && target.addEventListener) {\n      target.addEventListener(eventName, cb);\n    }\n\n    return () => {\n      if (target && target.removeEventListener) {\n        target.removeEventListener(eventName, cb);\n      }\n    };\n  }, []);\n};\n\n/**\n * Returns a frozen object of callback setters to handle the mouse events.<br/>\n * It accepts a DOM ref representing the events target. <br/>\n * If a target is not provided the events will be globally attached to the document object.\n * <br/>\n * ### Shall the `useMouseEvents` callbacks replace the standard mouse handler props?\n *\n * **They shall not!**<br />\n * **useMouseEvents is meant to be used to abstract more complex hooks that need to control mouse**, for instance:\n * a drag n drop hook.<br />\n * Using useMouseEvents handlers instead of the classic props approach it's just as bad as it sounds since you'll\n * lose the React SyntheticEvent performance boost.<br />\n * If you were doing something like the following:\n *\n * ```jsx harmony\n * const MyComponent = (props) => {\n *  const { myCallback } = props;\n *\n *  return <div onMouseDown={myCallback} />\n * }\n * ```\n *\n * **Please keep doing it**!\n *\n * ### Target ref usage:\n *\n * ```jsx harmony\n * const MyComponent = () => {\n *   const ref = useRef();\n *   const { onMouseMove } = useMouseEvents(ref);\n *   const [coordinates, setCoordinates] = useState([0, 0]);\n *\n *   // demo purposes only, in real-life scenario use onMouseMove prop instead\n *   onMouseMove((event) => {\n *     const nextCoords = [event.clientX, event.clientY];\n *     setCoordinates(nextCoords);\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       The current mouse coordinates within this div are:\n *       <p>x:{coordinates[0]} y:{coordinates[1]}</p>\n *     </div>\n *   );\n * }\n * ```\n * <br />\n *\n * ### Global events usage:\n *\n * ```jsx harmony\n * const MyComponent = () => {\n *   const [coordinates, setCoordinates] = useState([0, 0]);\n *   const { onMouseMove } = useMouseEvents();\n *\n *   // demo purposes only, in real-life scenario use onMouseMove prop instead\n *   onMouseMove((event) => {\n *     const nextCoords = [event.clientX, event.clientY];\n *     setCoordinates(nextCoords);\n *   });\n *\n *   return (\n *     <div style={style}>\n *       The current mouse coordinates within the document are:\n *       <p>x:{coordinates[0]} y:{coordinates[1]}</p>\n *     </div>\n *   );\n *};\n * ```\n */\nconst useMouseEvents = (targetRef = null) => {\n  const [onMouseDownHandler, setOnMouseDown] = useCallbackRef();\n  const [onMouseEnterHandler, setOnMouseEnter] = useCallbackRef();\n  const [onMouseLeaveHandler, setOnMouseLeave] = useCallbackRef();\n  const [onMouseMoveHandler, setOnMouseMove] = useCallbackRef();\n  const [onMouseOutHandler, setOnMouseOut] = useCallbackRef();\n  const [onMouseOverHandler, setOnMouseOver] = useCallbackRef();\n  const [onMouseUpHandler, setOnMouseUp] = useCallbackRef();\n\n  if (targetRef !== null && !hasOwnProperty(targetRef, 'current')) {\n    return createCbSetterErrorProxy('Unable to assign any mouse event to the given ref');\n  }\n\n  assignMouseEventOnMount(targetRef, onMouseDownHandler, 'mousedown');\n  assignMouseEventOnMount(targetRef, onMouseEnterHandler, 'mouseenter');\n  assignMouseEventOnMount(targetRef, onMouseLeaveHandler, 'mouseleave');\n  assignMouseEventOnMount(targetRef, onMouseMoveHandler, 'mousemove');\n  assignMouseEventOnMount(targetRef, onMouseOutHandler, 'mouseout');\n  assignMouseEventOnMount(targetRef, onMouseOverHandler, 'mouseover');\n  assignMouseEventOnMount(targetRef, onMouseUpHandler, 'mouseup');\n\n  return Object.freeze({\n    onMouseDown: setOnMouseDown,\n    onMouseEnter: setOnMouseEnter,\n    onMouseLeave: setOnMouseLeave,\n    onMouseMove: setOnMouseMove,\n    onMouseOut: setOnMouseOut,\n    onMouseOver: setOnMouseOver,\n    onMouseUp: setOnMouseUp,\n  });\n};\n\nexport default useMouseEvents;\n"],"file":"useMouseEvents.js"}