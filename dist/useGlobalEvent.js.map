{"version":3,"sources":["useGlobalEvent.js"],"names":["useGlobalEvent","eventName","callbackRef","setCallbackRef","cb","current","window","addEventListener","removeEventListener"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;AAwBA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,SAAD,EAAe;AAAA,wBACE,kCADF;AAAA;AAAA,MAC7BC,WAD6B;AAAA,MAChBC,cADgB;;AAGpC,wBAAU,YAAM;AACd,QAAMC,EAAE,GAAG,SAALA,EAAK;AAAA,aAAaF,WAAW,CAACG,OAAZ,OAAAH,WAAW,YAAxB;AAAA,KAAX;;AAEA,QAAIA,WAAW,CAACG,OAAZ,IAAuBJ,SAA3B,EAAsC;AACpCK,MAAAA,MAAM,CAACC,gBAAP,CAAwBN,SAAxB,EAAmCG,EAAnC;AACD;;AAED,WAAO,YAAM;AACX,UAAIH,SAAJ,EAAe;AACbK,QAAAA,MAAM,CAACE,mBAAP,CAA2BP,SAA3B,EAAsCG,EAAtC;AACD;AACF,KAJD;AAKD,GAZD,EAYG,CAACH,SAAD,CAZH;AAcA,SAAOE,cAAP;AACD,CAlBD;;eAoBeH,c","sourcesContent":["import { useEffect } from 'react';\nimport useCallbackRef from './useCallbackRef';\n\n/**\n * Accepts an event name then returns a callback setter for a function to be performed when the event triggers.\n *\n * ### Usage:\n *\n * ```jsx harmony\n * const MyComponent = () => {\n *    const [widowWidth, setWindowWidth] = useState(window.innerWidth);\n *    const onWindowResize = useGlobalEvent('resize');\n *\n *    onWindowResize(() => {\n *        setWindowWidth(window.innerWidth);\n *    });\n *\n *    return (\n *      <div>\n *        Current window width: {widowWidth}\n *      </div>\n *    );\n * }\n * ```\n */\nconst useGlobalEvent = (eventName) => {\n  const [callbackRef, setCallbackRef] = useCallbackRef();\n\n  useEffect(() => {\n    const cb = (...args) => callbackRef.current(...args);\n\n    if (callbackRef.current && eventName) {\n      window.addEventListener(eventName, cb);\n    }\n\n    return () => {\n      if (eventName) {\n        window.removeEventListener(eventName, cb);\n      }\n    };\n  }, [eventName]);\n\n  return setCallbackRef;\n};\n\nexport default useGlobalEvent;\n"],"file":"useGlobalEvent.js"}