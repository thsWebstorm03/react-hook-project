{"version":3,"sources":["useThrottledCallback.js"],"names":["useThrottledCallback","fn","wait","dependencies"],"mappings":";;;;;;;AAAA;;AACA;;;;AA4DA,IAAMA,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,EAAD;AAAA,MAAKC,IAAL,uEAAY,GAAZ;AAAA,MAAiBC,YAAjB;AAAA,SAAkC,wBAAY,0BAASF,EAAT,EAAaC,IAAb,CAAZ,EAAgCC,YAAhC,CAAlC;AAAA,CAA7B;;eAEeH,oB","sourcesContent":["import { useCallback } from 'react';\nimport throttle from './utils/throttle';\n\n/**\n * Accepts a function and returns a new throttled yet memoized version of that same function that waits the defined time\n * before allowing the next execution.<br />\n * If time is not defined, its default value will be 100ms.\n *\n * ### Usage:\n *\n * ```jsx harmony\n *\n * const TestComponent = () => {\n *   const [width, setWidth] = useState(window.innerWidth);\n *   const [height, setHeight] = useState(window.innerHeight);\n *   const onWindowResize = useWindowResize();\n *\n *   onWindowResize(useThrottledCallback(() => {\n *     setWidth(window.innerWidth);\n *     setHeight(window.innerHeight);\n *   }, 250));\n *\n *   return (\n *     <div style={compStyle}>\n *       <p>window width: {width}</p>\n *       <p>window height: {height}</p>\n *    </div>\n *   );\n * ```\n *\n * ### Debounce time:\n *\n * It is possible to change the throttle time by defining how many ms to wait:\n *\n * ```jsx harmony\n * const useDebouncedBy250 = (fn) => useThrottledCallback(fn, 250);\n * ```\n *\n * ### Dependencies:\n *\n * Since `useThrottledCallback` uses `useCallback` under the hood, it is also possible to define its dependencies:\n *\n * ```jsx harmony\n * const TestComponent = (props) => {\n *   const [width, setWidth] = useState(window.innerWidth);\n *   const [height, setHeight] = useState(window.innerHeight);\n *   const onWindowResize = useWindowResize();\n *\n *   onWindowResize(useThrottledCallback(() => {\n *     setWidth(window.innerWidth);\n *     setHeight(window.innerHeight);\n *   }, 250, [props.foo, props.bar]));\n *\n *   return (\n *     <div style={compStyle}>\n *       <p>window width: {width}</p>\n *       <p>window height: {height}</p>\n *    </div>\n *   );\n * ```\n */\nconst useThrottledCallback = (fn, wait = 100, dependencies) => useCallback(throttle(fn, wait), dependencies);\n\nexport default useThrottledCallback;\n"],"file":"useThrottledCallback.js"}