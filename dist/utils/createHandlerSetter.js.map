{"version":3,"sources":["utils/createHandlerSetter.js"],"names":["createHandlerSetter","handlerValue","handlerRef","current","setHandler","nextCallback","Error"],"mappings":";;;;;;;AAAA;;AAYA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,YAAD,EAAkB;AAC5C,MAAMC,UAAU,GAAG,mBAAOD,YAAP,CAAnB;AAGAC,EAAAA,UAAU,CAACC,OAAX,GAAqBF,YAArB;AAEA,MAAMG,UAAU,GAAG,wBAAY,UAACC,YAAD,EAAkB;AAC/C,QAAI,OAAOA,YAAP,KAAwB,UAA5B,EAAwC;AACtC,YAAM,IAAIC,KAAJ,CAAU,iFAAV,CAAN;AACD;;AAEDJ,IAAAA,UAAU,CAACC,OAAX,GAAqBE,YAArB;AACD,GANkB,CAAnB;AAQA,SAAO,CAACH,UAAD,EAAaE,UAAb,CAAP;AACD,CAfD;;eAiBeJ,mB","sourcesContent":["import { useCallback, useRef } from 'react';\n\n/**\n * Returns an array where the first item is the [ref](https://reactjs.org/docs/hooks-reference.html#useref) to a\n * callback function and the second one is setter for that function.<br /><br />\n *\n * Although it function looks quite similar to the [useState](https://reactjs.org/docs/hooks-reference.html#usestate),\n * hook, in this case the setter just makes sure the given callback is indeed a new function.<br /><br />\n * **Setting a callback ref does not imply your component to re-render.**<br /><br />\n *\n * `createHandlerSetter` is useful when abstracting other hooks to possibly implement handlers setters.\n */\nconst createHandlerSetter = (handlerValue) => {\n  const handlerRef = useRef(handlerValue);\n\n  // since useRef accepts an initial-value only, this is needed to make sure\n  handlerRef.current = handlerValue;\n\n  const setHandler = useCallback((nextCallback) => {\n    if (typeof nextCallback !== 'function') {\n      throw new Error('the argument supplied to the \\'setHandler\\' function should be of type function');\n    }\n\n    handlerRef.current = nextCallback;\n  });\n\n  return [handlerRef, setHandler];\n};\n\nexport default createHandlerSetter;\n"],"file":"createHandlerSetter.js"}